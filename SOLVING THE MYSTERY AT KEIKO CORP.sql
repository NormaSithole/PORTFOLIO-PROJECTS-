--SOLVING THE MYSTERY AT KEIKO CORP HEADQUATERS 

--THERE HAS BEEN A SECURITY BREACH AND SOMEONE HAS STOLEN VALUABLE DATA FROM THE COMPANY 
--WE ARE GIVEN CLUES ON THE SITUATION 

--CLUE 1: BRUNO THE CEO INSISTS IT WAS ONE OF HIS EMPLOYEES, BECAUSE NO ONE WOULD HAVE BEEN ABLE TO ACCESS THE INFORMATION OTHERWISE 
--CLUE 2: THE DATA BREACH HAPPENED DURING A CERTAIN PERIOD OF TIME 
--CLUE 3: YOU HAD TO BE ON LOCATION TO STEAL THE DATA 

--KEIKO EMPLOYEES AND THEIR FAMILY TRAVEL FOR FREE WITH THE MOVR PLATFORM AND SINCE KEIKO IS LOCATED IN THE HEART OF DOWNTOWN NEW YORK , HE'S THINKING THEY MAY HAVE USED THE PLATFORM TO GET AROUND 

--WE HAVE TWO PIECES OF DATA TO USE GIVEN TO US BY THE CEO 
--THE EMPLOYEE DATABASE WITH ALL EMPLOYEE RECORDS 
--A SECURITY CAMERA DATABASE WHICH COLLECTS DATA ON ALL THE CARS THAT COME THROUGH THE KEIKO CORP PARKING LOT 

--Date of incident: 2020-06-23
--Keiko Corp Latitude: -74.997 to -74.9968
--Keiko Corp Longitude: 40.5 to 40.6

--WITH THE INFORMATION GIVEN ABOVE WE NEED TO FIGURE OUT WHICH MOVR RIDES HAPPENED THAT DAY AROUND THE OFFICE 
--FIND THE VEHICLE OWNER LINKED TO THESE RIDES ( NO DUPLICATES) 
-- ONCE WE KNOW WHICH VEHICLES WERE LINKED TO EACH RIDE WE USE THEIR CURRENT LOCATION TO GO AND INTEROGATE THEM 

--SOLVING THE FIRST CLUES 

SELECT * FROM vehicle_location_histories AS v 
WHERE city = 'new york' AND 
v.long BETWEEN 40.5 AND 40.6 AND 
v.lat BETWEEN -74.997 AND -74.9968 AND 
v.timestamp :: date = '2020-06-23' :: date 
ORDER BY long 

-- IN VEHICLE LOCATION HISTORIES WE ARE ABLE TO GET THE LOCATION OF THE VEHICLES THAT WERE IN AND AROUND OF THE OFFICE ON THE DAY OF THE INCIDENT 
-- WE SELECT EVERYTING FROM VEHICLE LOCATION HISTORY AND WE FILTER BY THE CITY BECAUSE WE KNOW THIS IS IN NEW YORK, WE ALSO KNOW THE EXACT LATITUDE AND LONGITUDE OF KIEKO CORP AND WE WANT TO KNOW WHICH RIDES OCCERED CLOSE TO THE OFFICE 
-- WE ALSO FILTER BY THE DAY THE INCIDENT OCCURED. 

-- WE NOW HAVE 428 RIDES AS POSSIBLE SUSUPECTS AND PROCEED TO CREATE A VIEW OF THIS QUERY SO WE DONT HAVE TO KEEP REWRITING THE QUERY 

CREATE VIEW suspected_rides AS 
SELECT * FROM vehicle_location_histories AS v 
WHERE city = 'new york' AND 
v.long BETWEEN 40.5 AND 40.6 AND 
v.lat BETWEEN -74.997 AND -74.9968 AND 
v.timestamp :: date = '2020-06-23' :: date 
ORDER BY long

-- NOW WE NARROW DOWN THE RIDES TO THE DRIVERS 
SELECT DISTINCT r.vehicle_id FROM suspected_rides AS s JOIN rides AS r ON r.id = s.ride_id  

-- BY QUERYING THE VIEW SUSPECTED RIDES WE GET VEHICLE IDS AND ARE ABLE TO NARROW DOWN THAT THE TOTAL OF 428 RIDES WAS DONE BY 89 DRIVERS 

-- WE NOW PROCEED TO PUT TOGETHER THE EXACT OWNER INFORMATION OF EACH AND EVERY VEHICLE, WE DO THIS USING A MULTI JOIN QUERY 

SELECT DISTINCT r.vehicle_id, u.name AS "owner name", u.address, v.status, v.current_location 
FROM suspected_rides AS s 
JOIN rides AS r ON r.id = s.ride_id
JOIN vehicles AS v ON v.id = r.vehicle_id 
JOIN users AS u ON u.id = v.owner_id  

--IN THE ABOVE QUERY WE JOIN ON THE RIDES, JOIN ON USERS AND JOIN ON THE VEHICLES
--BASED ON THE SUSPECED RIDES WE GET THE CORRELATED RIDE ID
--LOOKING AT THE VEHICLES; WHERE THE RIDE VEHICLE ID MATCHES THE VEHICLE FROM THE VEHICLES. WE GET THAT INFORMATION 
-- WE THEN JOIN THE USER TABLE BECAUSE WE WANT THE OWNER ID FROM THE VEHICLE WHICH MATCHES A USER IN THE SYSTEM . 



-- AFTER INTERROGATING ALL 89 DRIVERS WE FIND THAT IT IS NOT THE DRIVERS AND IT IS MOST LIKELY ONE OF THE RIDERS 
-- WE NEED TO FIND WHICH RIDERS WERE IN THE AREA 
-- WITH OUR CURRENT SETUP, WE FILETER OUT ALL OF THE UNIQUE RIDERS THAT WERE ON THE SUSPECTED RIDES ON THE DAY OF THE INCIDENT 

SELECT DISTINCT r.vehicle_id, u.name AS "rider name", u.address
FROM suspected_rides AS s 
JOIN rides AS r ON r.id = s.ride_id
JOIN users AS u ON u.id = r.rider_id

-- IN THE ABOVE QUERY WE DONT WANT DUPLICATE INFORMATION BECASUSE SOMEONE COULDVE TAKEN MULTIPLE TRIPS THAT DAY 
-- WE NOW HAVE ALL THE RIDER INFORMATION AND CAN PROCEED TO INTEROGATION 


-- WE FIND THAT IT IS NOT THE RIDERS 
-- WE THEN GET A NEW CLUE THAT IT WAS AN INSIDE JOB THAT SOMEONE ON THE OUTSIDE WAS HELPED BY AN EMPLOYEE 
-- IT IS THEREFORE TWO PEOPLE THAT COLLABORATED AND WORKED TOGETHER
-- WE NOW LOOK FOR COMMOALITIES BETWEEN RIDERS AND DRIVERS 

-- FOR THIS WE ARE GOING TO CROSS REFERENCE DATA BETWEEN TWO SEPARATE DATABASES 

-- WE NEED TO CREATE A VIEW THAT SOLELY CONTAINS THE FIRST AND LAST NAME SEPARATED OF THE SUSPECTED RIDERS, AS THEIR NAME FIELD CONTAINS BOTH FIRST AND LAST NAME COMBINED
-- WE THEN CROSS REFERENCE THE FIRST AND LAST NAMES OF THE RIDERS AGAINST THE NAMES OF THE EMPLOYEES 

CREATE VIEW suspect_rider_name AS 
SELECT DISTINCT 
split_part(u.name, ' ', 1) AS "first_name", 
split_part(u.name, ' ', 2) AS "last_name"
FROM "public"."users" AS u  
JOIN "public"."rides" AS r ON r.rider_id = u.id
JOIN "public"."suspected_rides" AS s ON r.id = s.ride_id 


SELECT * FROM suspect_rider_name

-- THE ABOVE QUERY NOW GIVES US SUSPECT RIDER NAMES SEPARATED INTO COLUMS AND WE CAN USE THIS TO SEE HOW THIS CORRELATES WITH THE EMPLOYEES 

CREATE EXTENSION dblink 


SELECT DISTINCT
concat(t1.first_name, ' ', t1.last_name) AS "employee" , 
concat (sp.first_name, ' ', sp.last_name) AS "rider" 

FROM dblink('host=localhost user=postgres password = root dbname=movr_employees', 'select first_name, last_name FROM employees;') 

AS t1(first_name NAME, last_name NAME)

JOIN "public"."suspect_rider_name" AS sp ON t1.last_name = sp.last_name ORDER BY "rider"

 
-- THIS LEAVES US WITH OUR 11 SUSPECT EMPLOYEES AND WHO THEY MAY RELATED TO - THIS IS THE INFORMATION WE USE TO SOLVE THE MYSTERY 

-- GIVEN THE RESULTS THE SUSUPECTS ARE RELATED BY LAST NAME SHOWING US THAT THEYRE FAMILY 







